// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	svc "github.com/lyft/flyteplugins/go/tasks/plugins/svc"
	mock "github.com/stretchr/testify/mock"
)

// ServiceClient is an autogenerated mock type for the ServiceClient type
type ServiceClient struct {
	mock.Mock
}

type ServiceClient_ExecuteCommand struct {
	*mock.Call
}

func (_m ServiceClient_ExecuteCommand) Return(_a0 interface{}, _a1 error) *ServiceClient_ExecuteCommand {
	return &ServiceClient_ExecuteCommand{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ServiceClient) OnExecuteCommand(ctx context.Context, commandStr string, extraArgs interface{}) *ServiceClient_ExecuteCommand {
	c := _m.On("ExecuteCommand", ctx, commandStr, extraArgs)
	return &ServiceClient_ExecuteCommand{Call: c}
}

func (_m *ServiceClient) OnExecuteCommandMatch(matchers ...interface{}) *ServiceClient_ExecuteCommand {
	c := _m.On("ExecuteCommand", matchers...)
	return &ServiceClient_ExecuteCommand{Call: c}
}

// ExecuteCommand provides a mock function with given fields: ctx, commandStr, extraArgs
func (_m *ServiceClient) ExecuteCommand(ctx context.Context, commandStr string, extraArgs interface{}) (interface{}, error) {
	ret := _m.Called(ctx, commandStr, extraArgs)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) interface{}); ok {
		r0 = rf(ctx, commandStr, extraArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, commandStr, extraArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ServiceClient_GetCommandStatus struct {
	*mock.Call
}

func (_m ServiceClient_GetCommandStatus) Return(_a0 svc.CommandStatus, _a1 error) *ServiceClient_GetCommandStatus {
	return &ServiceClient_GetCommandStatus{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ServiceClient) OnGetCommandStatus(ctx context.Context, commandID string) *ServiceClient_GetCommandStatus {
	c := _m.On("GetCommandStatus", ctx, commandID)
	return &ServiceClient_GetCommandStatus{Call: c}
}

func (_m *ServiceClient) OnGetCommandStatusMatch(matchers ...interface{}) *ServiceClient_GetCommandStatus {
	c := _m.On("GetCommandStatus", matchers...)
	return &ServiceClient_GetCommandStatus{Call: c}
}

// GetCommandStatus provides a mock function with given fields: ctx, commandID
func (_m *ServiceClient) GetCommandStatus(ctx context.Context, commandID string) (svc.CommandStatus, error) {
	ret := _m.Called(ctx, commandID)

	var r0 svc.CommandStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) svc.CommandStatus); ok {
		r0 = rf(ctx, commandID)
	} else {
		r0 = ret.Get(0).(svc.CommandStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ServiceClient_KillCommand struct {
	*mock.Call
}

func (_m ServiceClient_KillCommand) Return(_a0 error) *ServiceClient_KillCommand {
	return &ServiceClient_KillCommand{Call: _m.Call.Return(_a0)}
}

func (_m *ServiceClient) OnKillCommand(ctx context.Context, commandID string) *ServiceClient_KillCommand {
	c := _m.On("KillCommand", ctx, commandID)
	return &ServiceClient_KillCommand{Call: c}
}

func (_m *ServiceClient) OnKillCommandMatch(matchers ...interface{}) *ServiceClient_KillCommand {
	c := _m.On("KillCommand", matchers...)
	return &ServiceClient_KillCommand{Call: c}
}

// KillCommand provides a mock function with given fields: ctx, commandID
func (_m *ServiceClient) KillCommand(ctx context.Context, commandID string) error {
	ret := _m.Called(ctx, commandID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, commandID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
