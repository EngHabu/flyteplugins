// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	service "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/remote"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

type Plugin_Create struct {
	*mock.Call
}

func (_m Plugin_Create) Return(_a0 service.ResourceKey, _a1 error) *Plugin_Create {
	return &Plugin_Create{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Plugin) OnCreate(ctx context.Context, tCtx service.PluginContext) *Plugin_Create {
	c := _m.On("Create", ctx, tCtx)
	return &Plugin_Create{Call: c}
}

func (_m *Plugin) OnCreateMatch(matchers ...interface{}) *Plugin_Create {
	c := _m.On("Create", matchers...)
	return &Plugin_Create{Call: c}
}

// Create provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) Create(ctx context.Context, tCtx service.PluginContext) (service.ResourceKey, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 service.ResourceKey
	if rf, ok := ret.Get(0).(func(context.Context, service.PluginContext) service.ResourceKey); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(service.ResourceKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.PluginContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Plugin_Delete struct {
	*mock.Call
}

func (_m Plugin_Delete) Return(_a0 error) *Plugin_Delete {
	return &Plugin_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *Plugin) OnDelete(ctx context.Context, key service.ResourceKey) *Plugin_Delete {
	c := _m.On("Delete", ctx, key)
	return &Plugin_Delete{Call: c}
}

func (_m *Plugin) OnDeleteMatch(matchers ...interface{}) *Plugin_Delete {
	c := _m.On("Delete", matchers...)
	return &Plugin_Delete{Call: c}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Plugin) Delete(ctx context.Context, key service.ResourceKey) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ResourceKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Plugin_Get struct {
	*mock.Call
}

func (_m Plugin_Get) Return(_a0 service.Resource, _a1 error) *Plugin_Get {
	return &Plugin_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Plugin) OnGet(ctx context.Context, key service.ResourceKey) *Plugin_Get {
	c := _m.On("Get", ctx, key)
	return &Plugin_Get{Call: c}
}

func (_m *Plugin) OnGetMatch(matchers ...interface{}) *Plugin_Get {
	c := _m.On("Get", matchers...)
	return &Plugin_Get{Call: c}
}

// Get provides a mock function with given fields: ctx, key
func (_m *Plugin) Get(ctx context.Context, key service.ResourceKey) (service.Resource, error) {
	ret := _m.Called(ctx, key)

	var r0 service.Resource
	if rf, ok := ret.Get(0).(func(context.Context, service.ResourceKey) service.Resource); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.ResourceKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Plugin_GetBatch struct {
	*mock.Call
}

func (_m Plugin_GetBatch) Return(_a0 service.Resource, _a1 error) *Plugin_GetBatch {
	return &Plugin_GetBatch{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Plugin) OnGetBatch(ctx context.Context, key ...service.ResourceKey) *Plugin_GetBatch {
	c := _m.On("GetBatch", ctx, key)
	return &Plugin_GetBatch{Call: c}
}

func (_m *Plugin) OnGetBatchMatch(matchers ...interface{}) *Plugin_GetBatch {
	c := _m.On("GetBatch", matchers...)
	return &Plugin_GetBatch{Call: c}
}

// GetBatch provides a mock function with given fields: ctx, key
func (_m *Plugin) GetBatch(ctx context.Context, key ...service.ResourceKey) (service.Resource, error) {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 service.Resource
	if rf, ok := ret.Get(0).(func(context.Context, ...service.ResourceKey) service.Resource); ok {
		r0 = rf(ctx, key...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...service.ResourceKey) error); ok {
		r1 = rf(ctx, key...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Plugin_GetPluginProperties struct {
	*mock.Call
}

func (_m Plugin_GetPluginProperties) Return(_a0 service.PluginProperties) *Plugin_GetPluginProperties {
	return &Plugin_GetPluginProperties{Call: _m.Call.Return(_a0)}
}

func (_m *Plugin) OnGetPluginProperties() *Plugin_GetPluginProperties {
	c := _m.On("GetPluginProperties")
	return &Plugin_GetPluginProperties{Call: c}
}

func (_m *Plugin) OnGetPluginPropertiesMatch(matchers ...interface{}) *Plugin_GetPluginProperties {
	c := _m.On("GetPluginProperties", matchers...)
	return &Plugin_GetPluginProperties{Call: c}
}

// GetPluginProperties provides a mock function with given fields:
func (_m *Plugin) GetPluginProperties() service.PluginProperties {
	ret := _m.Called()

	var r0 service.PluginProperties
	if rf, ok := ret.Get(0).(func() service.PluginProperties); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.PluginProperties)
	}

	return r0
}

type Plugin_GetStatus struct {
	*mock.Call
}

func (_m Plugin_GetStatus) Return(_a0 core.PhaseInfo, _a1 error) *Plugin_GetStatus {
	return &Plugin_GetStatus{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Plugin) OnGetStatus(ctx context.Context, tCtx service.PluginContext, resource service.Resource) *Plugin_GetStatus {
	c := _m.On("GetStatus", ctx, tCtx, resource)
	return &Plugin_GetStatus{Call: c}
}

func (_m *Plugin) OnGetStatusMatch(matchers ...interface{}) *Plugin_GetStatus {
	c := _m.On("GetStatus", matchers...)
	return &Plugin_GetStatus{Call: c}
}

// GetStatus provides a mock function with given fields: ctx, tCtx, resource
func (_m *Plugin) GetStatus(ctx context.Context, tCtx service.PluginContext, resource service.Resource) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, tCtx, resource)

	var r0 core.PhaseInfo
	if rf, ok := ret.Get(0).(func(context.Context, service.PluginContext, service.Resource) core.PhaseInfo); ok {
		r0 = rf(ctx, tCtx, resource)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.PluginContext, service.Resource) error); ok {
		r1 = rf(ctx, tCtx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
