// Code generated by "enumer -type=MissingResourcePolicy -trimprefix=MissingResourcePolicy -json"; DO NOT EDIT.

//
package remote

import (
	"encoding/json"
	"fmt"
)

const _MissingResourcePolicyName = "MissingResourceFailMissingResourceRetry"

var _MissingResourcePolicyIndex = [...]uint8{0, 19, 39}

func (i MissingResourcePolicy) String() string {
	if i >= MissingResourcePolicy(len(_MissingResourcePolicyIndex)-1) {
		return fmt.Sprintf("MissingResourcePolicy(%d)", i)
	}
	return _MissingResourcePolicyName[_MissingResourcePolicyIndex[i]:_MissingResourcePolicyIndex[i+1]]
}

var _MissingResourcePolicyValues = []MissingResourcePolicy{0, 1}

var _MissingResourcePolicyNameToValueMap = map[string]MissingResourcePolicy{
	_MissingResourcePolicyName[0:19]:  0,
	_MissingResourcePolicyName[19:39]: 1,
}

// MissingResourcePolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MissingResourcePolicyString(s string) (MissingResourcePolicy, error) {
	if val, ok := _MissingResourcePolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MissingResourcePolicy values", s)
}

// MissingResourcePolicyValues returns all values of the enum
func MissingResourcePolicyValues() []MissingResourcePolicy {
	return _MissingResourcePolicyValues
}

// IsAMissingResourcePolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MissingResourcePolicy) IsAMissingResourcePolicy() bool {
	for _, v := range _MissingResourcePolicyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MissingResourcePolicy
func (i MissingResourcePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MissingResourcePolicy
func (i *MissingResourcePolicy) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MissingResourcePolicy should be a string, got %s", data)
	}

	var err error
	*i, err = MissingResourcePolicyString(s)
	return err
}
